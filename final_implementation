LogoutController.java
package com.trinadh.spring.controllers;




import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;


@Controller
@SessionAttributes("name")
public class LogoutController {
	
	
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpServletRequest request,HttpServletResponse response) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		if (auth != null) {
			new SecurityContextLogoutHandler().logout(request, response, auth);
			request.getSession().invalidate();
		}
		return "redirect:/";
	}	
	
	
}
----------------------------------------------------------------------------------------------------------------------------------------
WelcomeController.java
package com.trinadh.spring.controllers;




import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;


@Controller
@SessionAttributes("name")
public class WelcomeController {
	
	
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String showLogin(ModelMap model) {
		model.put("name", "trinadh");

	return "welcome";
	}
	
	
}
------------------------------------------------------------------------------------------------------------------------------------
ExceptionController.java
package com.trinadh.spring.exception;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;

@ControllerAdvice
public class ExceptionController {

	private Log logger = LogFactory.getLog(ExceptionController.class);

	@ExceptionHandler(value = Exception.class)
	public String handleError(HttpServletRequest req, Exception exception) {
		logger.error("Request: " + req.getRequestURL() + " raised " + exception);
		return "error";
	}
}
----------------------------------------------------------------------------------------------------------------------------------------
User.java
package com.trinadh.spring.model;



public class User {
	private String userName;
	private String password;

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
}
----------------------------------------------------------------------------------------------------------------------------------------
SecurityConfiguration.java
package com.trinadh.spring.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	public void configureGlobalSecurity(AuthenticationManagerBuilder auth)
			throws Exception {
		auth.inMemoryAuthentication().withUser("trinadh").password("rayala")
				.roles("USER", "ADMIN");
		//we can add multiple number of authentications.
	}
	
	/*
	 * //for /login no need to write code for login in spring mvc .. spring security
	 * itse /login is exposed by spring security by its own. No need to create
	 * /login Spring security exposes a page to capture the login credentials.
	 */

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		http.authorizeRequests().antMatchers("/login").permitAll()
				.antMatchers("/", "/*todo*/**").access("hasRole('USER')").and()
				.formLogin();
	}
}
------------------------------------------------------------------------------------------------------------------
Todo.java
package com.trinadh.spring.todo;

import java.util.Date;
import java.util.Objects;

import javax.validation.constraints.Size;

public class Todo {
	private int id;
	private String user;
	
	@Size(min = 6, message = "Enter atleast 6 Characters")
	private String desc;
	
	private Date targetDate;
	private boolean isDone;
	
	
	public Todo() {}
	
	public Todo(int id, String user, String desc, Date targetDate, boolean isDone) {
		super();
		this.id = id;
		this.user = user;
		this.desc = desc;
		this.targetDate = targetDate;
		this.isDone = isDone;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getUser() {
		return user;
	}
	public void setUser(String user) {
		this.user = user;
	}
	public String getDesc() {
		return desc;
	}
	public void setDesc(String desc) {
		this.desc = desc;
	}
	public Date getTargetDate() {
		return targetDate;
	}
	public void setTargetDate(Date targetDate) {
		this.targetDate = targetDate;
	}
	public boolean isDone() {
		return isDone;
	}
	public void setDone(boolean isDone) {
		this.isDone = isDone;
	}
	@Override
	public String toString() {
		return String.format("comes from toString -> :: Todo [id=%s, user=%s, desc=%s, targetDate=%s, isDon=%s]", id, user, desc, targetDate,
				isDone);
	}
	@Override
	public int hashCode() {
		return Objects.hash(id);
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Todo other = (Todo) obj;
		return id == other.id;
	}
	
	

}

------------------------------------------------------------------------------------------------------------------------
TodoController.java
package com.trinadh.spring.todo;




import java.text.SimpleDateFormat;
import java.util.Date;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;



@Controller
public class TodoController {
	
	@Autowired
	TodoService todoService;

	//note by trinadh: initBinder to tell controller for all the date format across the application.
	@InitBinder
	protected void initBinder(WebDataBinder binder) {
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));
	}
	
	@RequestMapping(value = "/list-todos", method = RequestMethod.GET)
	public String todoList(ModelMap model) {
		model.addAttribute("todos",todoService.retrieveTodos(retrieveLoggedinUserName()));
		return "list-todos";
	}

	
	
	private String retrieveLoggedinUserName() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof UserDetails)
			return ((UserDetails) principal).getUsername();

		return principal.toString();
	}
	
	
	@RequestMapping(value = "/add-todo", method = RequestMethod.GET)
	public String showtodoList(ModelMap model) {
		
		//throw new RuntimeException("Dummy Exception");
		
		//used to bing with commandName in todo.jsp : commandName="todo" >
		model.addAttribute("todo",new Todo(0,retrieveLoggedinUserName(),"helloDesc",new Date(),false));
		return "todo";
	}
	
	@RequestMapping(value = "/add-todo", method = RequestMethod.POST)
	public String addtodoList(ModelMap model,@Valid Todo todo, BindingResult result) {
		
		if(result.hasErrors()) {
			return "todo";
		}
		model.clear();
		todoService.addTodo(retrieveLoggedinUserName(), todo.getDesc(), new Date(), false);
		return "redirect:list-todos";
	}
	
	@RequestMapping(value = "/update-todo", method = RequestMethod.GET)
	public String updateTodoList(ModelMap model, @RequestParam int id) {
		System.out.println("id: " + id);
		Todo todo = todoService.retrieveTodo(id);
		model.addAttribute("todo",todo);
	//need to do delete here 
		return "todo";
	}
	
	
	@RequestMapping(value = "/update-todo", method = RequestMethod.POST)
	public String updateTodoList(ModelMap model,@Valid Todo todo, BindingResult result) {
		if(result.hasErrors()) {
			return "todo";
		}
		 todo.setUser(retrieveLoggedinUserName()); //TODO:Remove Hardcoding Later
		todoService.updateTodo(todo);
		return "redirect:list-todos";
	}

	//delete-todo
	@RequestMapping(value = "/delete-todo", method = RequestMethod.GET)
	public String deletetodoList(ModelMap model, @RequestParam int id) {
		System.out.println("id: " + id);
		todoService.deleteTodo(id);
	//need to do delete here 
		return "redirect:list-todos";
	}
	
	
}
---------------------------------------------------------------------------------------------------------------------------
TodoService.java
package com.trinadh.spring.todo;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.springframework.stereotype.Service;


@Service
public class TodoService {
	private static List<Todo> todos = new ArrayList<Todo>();
	private static int todoCount = 3;
	
	static {
		todos.add(new Todo(1, "trinadh", "Learn Spring MVC", new Date(),false));
		todos.add(new Todo(2, "trinadh", "Learn Struts", new Date(), false));
		todos.add(new Todo(3, "trinadh", "Learn Hibernate", new Date(),false));
	}
	public List<Todo> retrieveTodos(String user) {
		List<Todo> filteredTodos = new ArrayList<Todo>();
		for (Todo todo : todos) {
			if (todo.getUser().equals(user))
				filteredTodos.add(todo);
		}
		return filteredTodos;
	}
	
	public void addTodo(String name, String desc, Date targetDate, boolean isDone) {
		todos.add(new Todo(++todoCount, name, desc, targetDate, isDone));
	}
	
	public void deleteTodo(int id) {
		
		Iterator<Todo> iterator = todos.iterator();
		
		while (iterator.hasNext()) {
			Todo todo = iterator.next();
			if (todo.getId() == id) {
				iterator.remove();
			}
		}
	}
	
	public Todo retrieveTodo(int id) {
		for (Todo todo : todos) {
			if (todo.getId() == id)
				return todo;
		}
		return null;
	}

	public void updateTodo(Todo todo) {
		todos.remove(todo);
		todos.add(todo);
	}
   

}

-------------------------------------------------------------------------------------------------------------------
/spring-mvc-example/src/main/resources
log4j.properties
log4j.rootLogger=INFO, Appender1, Appender2
 
log4j.appender.Appender1=org.apache.log4j.ConsoleAppender
log4j.appender.Appender1.layout=org.apache.log4j.PatternLayout
log4j.appender.Appender1.layout.ConversionPattern=%-7p %d [%t] %c %x - %m%n

#there are 5 levels for each level it prints under levels all
#like if you do fro level 5 then it run all remaining levels also

#level 5 --> Trace
#level 4 --> Debug
#level 3 --> Info
#level 2 --> Warn
#level 1 --> Error
-----------------------------------------------------------------------------------------------------------------
message_en.properties
todo.caption= Your Todos are in English
------------------------------------------------------------------------------
/spring-mvc-example/src/main/webapp/WEB-INF/views/common

footer.jspf
<script src="webjars/jquery/1.9.1/jquery.min.js"></script>
<script src="webjars/bootstrap/3.3.6/js/bootstrap.min.js"></script>

</body>
</html>
-----------------------------------------------------------------------------------------------------------
header.jspf
<%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@taglib uri="http://www.springframework.org/tags/form" prefix="form"%>
<%@taglib uri="http://www.springframework.org/tags" prefix="spring"%>
  
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>

<link href="webjars/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">
	    		
</head>
<body>
-----------------------------------------------------------------------------------------------------------
navigation.jspf
<nav role="navigation" class="navbar navbar-default">
	<div class="">
		<a href="http://www.google.com" class="navbar-brand">Google</a>
	</div>
	<div class="navbar-collapse">
		<ul class="nav navbar-nav">
			<li><a href="./">Home</a></li>
			<li class="active"><a href="./list-todos">Todos</a></li>

		</ul>
		<ul class = "nav navbar-nav navbar-right">
		<li><a href="./logout">Logout</a></li>
		</ul>
	</div>
</nav>
--------------------------------------------------------------------------------------------------------

/spring-mvc-example/src/main/webapp/WEB-INF/views

error.jsp
<%@ include file = "common/header.jspf" %>
<%@ include file = "common/navigation.jspf" %>

<div class = "container">
Application has encountered an error.
please contact support on ...
</div>


<%@ include file = "common/footer.jspf" %>
--------------------------------------------------------------------------------------------------
list-todos.jsp
<%@ include file = "common/header.jspf" %>
<%@ include file = "common/navigation.jspf" %>


<div class = "container">
Hi ${name}
<br/>
your todos are :
 <br/>
 
 <%-- <c:forEach items = "${todos}" var = "todo">
 ${todo.id} ${todo.desc} ${todo.user} </br>
 </c:forEach>  --%>
 
 
 
 <table class = "table table-striped">
			<caption><%-- <spring:message code = "todo.caption"/> --%>Your Todos are</caption>

			<thead>
				<tr>
					<th>Description</th>
					<th>Date</th>
					<th>Completed</th>
					<th></th>
				</tr>
			</thead>

			<tbody>
				<c:forEach items="${todos}" var="todo">
					<tr>
						<td>${todo.desc}</td>
						<%-- <td>${todo.targetDate}</td> --%>
						<td><fmt:formatDate pattern="dd/MM/yyyy"
									value="${todo.targetDate}" /></td>
						<td>${todo.done}</td>
						<td><a href = "./update-todo?id=${todo.id}" class = "btn btn-success">update</a></td>
						<td><a href = "./delete-todo?id=${todo.id}" class = "btn btn-danger">Delete</a></td>
					</tr>
				</c:forEach>
			</tbody>
		</table>
	
 <div>
 <a class = "btn btn-success" href="./add-todo">Add</a>
 </div> 
 	</div>

<%@ include file = "common/footer.jspf" %>
--------------------------------------------------------------------------------------------------------
todo.jsp
<%@ include file = "common/header.jspf" %>


<div>
<h1> add toDo</h1>

	<form:form method = "post" commandName="todo" >
	<form:hidden path = "id"/>
	
	
	
	<fieldset class = "form-group">
	
	<form:label path = "desc">Description</form:label>
	<form:input path = "desc" type = "text"  class = "form-control" required = "required"/> 
	<form:errors path="desc" cssClass="text-warning" />
	</fieldset>
	
	<fieldset class = "form-group">
	<form:label path = "targetDate">Target Date</form:label>
	<form:input path = "targetDate" type = "text"  class = "form-control" required = "required"/> 
	<form:errors path="targetDate" cssClass="text-warning" />ser
	
	</fieldset>
	
	<input class = "btn btn-success" type = "submit" value = "Submit"> 
	</form:form>
</div>

<%@ include file = "common/footer.jspf" %>
--------------------------------------------------------------------------------------------------------
welcom.jsp
<%@ include file = "common/header.jspf" %>
<%@ include file = "common/navigation.jspf" %>


<div class = "container">
Welcome ${name}

<br/>

<div>
<a class = "button" href = "./list-todos">showTodos</a>
</div>
	</div>

<%@ include file = "common/footer.jspf" %>
-------------------------------------------------------------------------------------------------------
/spring-mvc-example/src/main/webapp/WEB-INF/spring-servlet.xml

spring-servlet.xml
<beans xmlns="http://www.springframework.org/schema/beans"
	    xmlns:context="http://www.springframework.org/schema/context"
	    xmlns:mvc="http://www.springframework.org/schema/mvc"
	    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- Enable Spring MVC -->
   <context:component-scan base-package="com.trinadh.spring" />
   
   <mvc:annotation-driven />
   
	<bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/views/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>
	
	
	<!--internationalization-->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="en" />
	</bean>

	<mvc:interceptors>
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="language" />
		</bean>
	</mvc:interceptors>
	
	
	<!-- location to specify where the bootstrap and jquery resources paths available -->
	<mvc:resources mapping="/webjars/**" location="/webjars/"/>
	
	    
	    
	</beans>
  --------------------------------------------------------------------------------------------------------
  web.xml
  <?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance" xmlns="https://java.sun.com/xml/ns/javaee" xsi:schemaLocation="https://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>spring-mvc-example</display-name>

	<!-- Add Spring MVC DispatcherServlet as front controller -->
	<servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>
                org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <context-param>
       		<param-name>contextConfigLocation</param-name>
       		<param-value>/WEB-INF/spring-servlet.xml</param-value>
    		</context-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
 
    <servlet-mapping>
        <servlet-name>spring</servlet-name>
        <url-pattern>/</url-pattern> 
    </servlet-mapping>
    
    <!-- 
    for spring security -->
	   <filter>
	    		<filter-name>springSecurityFilterChain</filter-name>
	    		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	   </filter>
	 
	   <filter-mapping>
	   		<filter-name>springSecurityFilterChain</filter-name>
	    		<url-pattern>/*</url-pattern>
	   </filter-mapping> 
	   
	   
	   <!-- way to handle exceptions in jsp pages -->
	   <error-page>
	    <location>/WEB-INF/views/jsp/error.jsp</location>
	</error-page>
    
 </web-app>
 
 --------------------------------------------------------------------------------------------------------------

/spring-mvc-example/pom.xml

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.trinadh.springmvc</groupId>
  <artifactId>spring-mvc-example</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>springMVCExample</name>
  
  <!-- Add Spring Web and MVC dependencies -->
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>4.3.9.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>4.3.9.RELEASE</version>
		</dependency>
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.17</version>
		</dependency>
		 <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>3.3.6</version>
        </dependency>
        <dependency>
    			<groupId>org.hibernate</groupId>
    			<artifactId>hibernate-validator</artifactId>
    			<version>4.2.0.Final</version>
 		</dependency>
 		<!-- API, java.xml.bind module -->
			<!--
			<dependency>
			    <groupId>jakarta.xml.bind</groupId>
			    <artifactId>jakarta.xml.bind-api</artifactId>
			    <version>2.3.2</version>
			</dependency>
			-->
<!-- Runtime, com.sun.xml.bind module -->
<dependency>
    <groupId>org.glassfish.jaxb</groupId>
    <artifactId>jaxb-runtime</artifactId>
    <version>2.3.2</version>
</dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>1.9.1</version>
        </dependency>
        
        <dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>4.0.1.RELEASE</version>
  		</dependency>

       <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>4.0.1.RELEASE</version>
        </dependency>
	</dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>17</release>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.2.3</version>
      </plugin>
      
      <plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.2</version>
					<configuration>
						<path>/</path>
						<contextReloadable>true</contextReloadable>
					</configuration>
				</plugin>
      
      
    </plugins>
  </build>
</project>
==========================================================================================

